<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.1.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
						http://code.alibabatech.com/schema/dubbo
                        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<context:property-placeholder location="classpath:configs/*.properties" />

	<!--druid 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">

		<!-- 数据库基本信息配置 -->
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="filters" value="stat"/>

		<!-- 最大并发连接数 -->
		<property name = "maxActive" value="20"/>

		<!-- 初始化连接数量 -->
		<property name = "initialSize" value="1"/>

		<!-- 配置获取连接等待超时的时间 -->
		<property name = "maxWait" value="60000"/>

		<!-- 最小空闲连接数 -->
		<property name = "minIdle" value="10"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name = "timeBetweenEvictionRunsMillis" value ="60000"/>

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name = "minEvictableIdleTimeMillis" value ="300000"/>
		<property name = "validationQuery" value = "SELECT 'x'"/>
		<property name = "testWhileIdle"  value = "true" />
		<property name = "testOnBorrow"  value = "false" />
		<property name = "testOnReturn"  value = "false" />
		<property name = "maxOpenPreparedStatements" value ="20"/>

		<!-- 打开 removeAbandoned 功能 -->
		<property name = "removeAbandoned" value = "true"/>

		<!-- 1800 秒，也就是 30 分钟 -->
		<property name = "removeAbandonedTimeout" value ="1800"/>

		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name = "logAbandoned" value = "true"/>
	</bean>

	<!-- 配置SqlSessionFactoryBean --> 
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       <property name="dataSource" ref="dataSource"/>  
       <property name="configLocation" value="classpath:configs/mybatis-config.xml"/>
       <property name="mapperLocations" value="classpath:configs/mappers/${jdbc.configLocation}/*/*.xml"/>
		<property name="typeAliasesPackage" value="com.mes.entity.control"/>
    </bean>
    <!-- 通过扫描的模式，扫描目录在com/hoo/mapper目录下，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->  
    <bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
        <property name="basePackage" value="com.mes.control.mapper"/>
    </bean>
    
	<!-- 事务管理器 -->
	<bean id="transactionmanager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- 加载activiti引擎 -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionmanager" />
		<property name="databaseSchemaUpdate" value="true" />
		<property name="jobExecutorActivate" value="false" />
		<property name="mailServerHost" value="mail.my-corp.com" />
		<property name="mailServerPort" value="5025" />
	</bean>

	<!-- 加载activiti引擎 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>

	<!-- activiti的各种服务接口 -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
	
	<!-- 方法事务参数 -->
	<tx:advice id="serviceAdvice" transaction-manager="transactionmanager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
			<tx:method name="upload*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
			<tx:method name="start*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
			<tx:method name="auth*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
			<tx:method name="switch*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
			<tx:method name="station*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
            <tx:method name="print*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
            <tx:method name="passStation" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
            <tx:method name="config*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
            <tx:method name="clone*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
			<tx:method name="completeTask*" propagation="REQUIRED" rollback-for="com.mes.common.framework.Exception.DubboProviderException"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<!-- 配置切面 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="servicePointcut" expression="execution(* com.mes.control.provider.*.*(..)) || execution(* com.mes.common.framework.dubbo.impl.*.*(..))"/>
		<aop:advisor pointcut-ref="servicePointcut" advice-ref="serviceAdvice"/>
	</aop:config>

	<context:component-scan base-package="com.mes"/>

	<!--提供方应用信息，用于计算依赖关系-->
	<dubbo:application name="server-provider" owner="programmer" organization="dubbox"/>

	<!-- 使用zookeeper注册中心暴露服务地址 -->
	<!--<dubbo:registry address="${zookeeper.dubbo.provider}" />-->
	<dubbo:registry protocol="zookeeper" address="${zookeeper.dubbo.provider}" register="true" file="./dubbo/dubbo-registry.cache"/>
	<!--<dubbo:registry protocol="zookeeper" address="${zookeeper.dubbo.provider}" />-->

	<!-- 用dubbo协议在20886端口暴露服务 -->
	<dubbo:protocol name="dubbo" host="${dubbo.protocol.dubbo.host}" serialization="kryo"  port="${dubbo.protocol.dubbo.port}"/>
	<dubbo:protocol name="hessian" port="${server.port}" contextpath="${server.name}" server="servlet"/>

	<!--加载dubbo-->
	<import resource="provider/dubbo-control-provider.xml"/>


</beans>